#   ----------------------------------------------------------------------
#   Copyright (C) 2018 World Intellectual Property Organization (WIPO).
#   All Rights Reserved.
#
#   v1.0   Kumar Vipin     Initial Version
#   ----------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09

Description: > 
  Template to build cloudformation distributions

Parameters:
  NamePrefix:
    Type: String

  CloudfrontOAI:
    Description: "Cloudfront Origin Access Identity"
    Type: String
  
  OriginDomainName:
    Description: "The origin domain name that will be proxied by Cloudfront"
    Type: String
  
  HostedZoneName:
    Description: Lisbon express Hosted Zone name
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid DNS zone name

  AliasPrefix:
    Description: Alias prefix to be appended before the Hosted Zone name
    Type: String
    Default: ''
  
  AlternativeAlias:
    Description: Alternative Alias to be used instead of the Hosted Zone alias
    Type: String
    Default: ''

  Environment:
    Description: Environment type (controls various parameters of the deployment, ip ranges, size of the EC2 instances, tags, etc.)
    Type: String
    AllowedValues: [dev, acc, prd]

  cdnWebCertificateArn:
    Description: Certificate to be used by cloud front
    Type: String
    
  WAFAcl:
    Description: WAF Rule to restrict access to WIPO IPs
    Type: String
  
  LogsBucket:
    Description: Logs S3 Bucket
    Type: String

  FilesBucketDomainName:
    Description: The origin domain name that will be proxied by Cloudfront
    Type: String

  ApiGatewayArn:
    Type: String
  
Conditions:
  HasAliasPrefix: !Not [!Equals ['', !Ref AliasPrefix]]
  HasAlternativeAlias: !Not [!Equals ['', !Ref AlternativeAlias]]
  isNotProd: !Not [!Equals ["prd" , !Ref Environment]]

Resources:
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: 
          - !If
            - HasAlternativeAlias
            - !Ref AlternativeAlias
            - !If
              - HasAliasPrefix
              - !Sub '${AliasPrefix}.${HostedZoneName}'
              - !Ref HostedZoneName
        Origins:
        - DomainName: !Ref OriginDomainName
          Id: Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudfrontOAI}'
        - DomainName: !Ref FilesBucketDomainName
          Id: s3OriginFiles
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudfrontOAI}'
        - DomainName: !Ref FilesBucketDomainName
          Id: s3OriginPdf
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudfrontOAI}'
        - DomainName:  !Ref ApiGatewayArn
          Id: 'ApiOrigin'
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        CacheBehaviors:
          - TargetOriginId: s3OriginFiles
            PathPattern: "files/*"
            AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # Caching will be alwayds disbaled for all Env.
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
          - TargetOriginId: s3OriginPdf
            PathPattern: "pdf/*"
            AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            CachePolicyId: !If [ isNotProd, "4135ea2d-6df8-44a3-9df3-4b5a84be39ad", !Ref "AWS::NoValue"]
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 86400
            MaxTTL: 86400
            MinTTL: 86400
          - TargetOriginId: ApiOrigin
            PathPattern: "api/*"
            AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            # CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # Commented for Leacy cache settings to make it work Querystringparams
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachePolicyId: !If [ isNotProd, "4135ea2d-6df8-44a3-9df3-4b5a84be39ad", !Ref "AWS::NoValue"] 
          Compress: true
          TargetOriginId: Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        CustomErrorResponses:    
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"      
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
          Fn::Transform:
            Name: lisbon-express-get-export-region  # MACRO NAME
            Parameters:
              TargetRegion: us-east-1
              PropertyName: AcmCertificateArn
              ExportName: !Ref cdnWebCertificateArn
        WebACLId: !If [isNotProd, !Ref WAFAcl, !Ref AWS::NoValue]
        Logging:
          Bucket: !Sub ${LogsBucket}.s3.amazonaws.com
          Prefix: express-cloudfront

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Comment: DNS name for the CDN
      Name: !If [HasAliasPrefix, !Sub '${AliasPrefix}.${HostedZoneName}', !Ref HostedZoneName]
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # This is always the hosted zone ID to routes traffic to a CloudFront distribution
        DNSName: !GetAtt CloudfrontDistribution.DomainName
     