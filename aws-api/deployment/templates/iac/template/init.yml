#   ----------------------------------------------------------------------
#   Copyright (C) 2018 World Intellectual Property Organization (WIPO).
#   All Rights Reserved.
#
#   v1.0   Kumar Vipin    Initial Version
#   ----------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09

Description: > 
  Template to build common resources

Parameters:
  NamePrefix:
    Description: Prefix added to the name of resources created in this stack (must be the same as the one of the pipeline)
    Type: String
  
  LogRetentionDays:
    Type: Number
    Description: Number of days of Log retention of CloudWatch

Resources:
#  CloudFrontOriginAccessIdentity:
#    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
#    Properties:
#      CloudFrontOriginAccessIdentityConfig:
#        Comment: !Sub 'CloudFront OAI for lisbon express web'

  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-stackset-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${NamePrefix}-stackset-execution-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - acm:DeleteCertificate
                  - acm:RemoveTagsFromCertificate
                  - acm:AddTagsToCertificate
                  - acm:DescribeCertificate
                  - acm:GetCertificate
                  - acm:UpdateCertificateOptions
                Resource:
                  - !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/*
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:PutAccountConfiguration
                  - cloudformation:CreateStackSet
                  - cloudformation:ListStacks
                  - sns:SetSubscriptionAttributes
                  - sns:Publish
                  - sns:Unsubscribe
                  - sns:Subscribe
                  - sns:ConfirmSubscription
                Resource: ['*']
              - Effect: Allow
                Action:
                  - cloudformation:ListStackSets
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:UpdateStackSet
                  - cloudformation:DeleteStackSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackResources
                Resource: 
                  - !Sub arn:aws:cloudformation:us-east-1:${AWS::AccountId}:stack/*/*
                  - !Sub arn:aws:cloudformation:us-east-1:${AWS::AccountId}:type/resource/*
                  - !Sub arn:aws:cloudformation:us-east-1:${AWS::AccountId}:stackset-target/*
                  - !Sub arn:aws:cloudformation:us-east-1:${AWS::AccountId}:stackset/*/*
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource:
                  - arn:aws:route53:::hostedzone/* 

  CloudformationAdminRole:
    Type: AWS::IAM::Role
    DependsOn:
      - CloudformationExecutionRole
    Properties:
      RoleName: !Sub ${NamePrefix}-stackset-admin-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${NamePrefix}-stackset-admin-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-stackset-execution-role

#  LambdaGetExportRegionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: !Sub ${NamePrefix}-get-export-region-lambda-role
#      AssumeRolePolicyDocument:
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service: [lambda.amazonaws.com]
#          Action: ['sts:AssumeRole']
#      Path: /
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#      Policies:
#      - PolicyName: !Sub ${NamePrefix}-get-output-region-lambda-policy
#        PolicyDocument:
#          Statement:
#          - Effect: Allow
#            Action:
#              - cloudformation:ListExports
#            Resource: '*'

#  LambdaGetExportRegion:
#    Type: AWS::Lambda::Function
#    Properties:
#      FunctionName: !Sub ${NamePrefix}-get-export-region-lambda
#      Description: Lambda function gets an export from cloudformation stacks in other regions
#      Role: !GetAtt LambdaGetExportRegionRole.Arn
#      Runtime: python3.8
#      Timeout: 60
#      Handler: index.handler
#      Code:
#        ZipFile: |
#          import boto3
#
#          def handler(event, context):
#            print (event)
#            response = {}
#            response['requestId'] = event['requestId']
#            response['status'] = 'FAILED'
#
#            try:
#              targetRegion = event['params']['TargetRegion']
#              propertyName = event['params']['PropertyName']
#              exportName = event['params']['ExportName']
#
#              client = boto3.client('cloudformation', region_name=targetRegion)
#
#              exportValue = ''
#              nextToken = ''
#
#              while True:
#                list_exports = None
#                if (nextToken):
#                  print('Has NextToken')
#                  list_exports = client.list_exports(NextToken=nextToken)
#                else:
#                  print('No NextToken')
#                  list_exports = client.list_exports()
#
#                print('Exports list: ')
#                print(list_exports)
#
#                for export in list_exports.get('Exports', []):
#                  if (export['Name'] == exportName):
#                    exportValue = export['Value']
#                    print('Export found: ' + exportValue)
#                    break
#
#                if ('NextToken' in list_exports):
#                  print('NextToken is present')
#                  nextToken = list_exports['NextToken']
#                else:
#                  print('NextToken is empty')
#                  break
#
#              fragment = event['fragment']
#              fragment[propertyName] = exportValue
#              response['fragment'] = fragment
#              response['status'] = 'SUCCESS'
#
#              print(response);
#              return response;
#            except Exception as e:
#              print('Operation Failed');
#              print(e)
#              response['Error'] = str(e)
#              return response
#
#  MacroGetExportRegion:
#    Type: AWS::CloudFormation::Macro
#    Properties:
#      Name: !Sub ${NamePrefix}-get-export-region
#      Description: "Get the export value from other regions"
#      FunctionName: !Ref LambdaGetExportRegion
#
#  BasicMacroLambdaRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: !Sub ${NamePrefix}-basic-macro-lambda-role
#      AssumeRolePolicyDocument:
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service: [lambda.amazonaws.com]
#          Action: ['sts:AssumeRole']
#      Path: /
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#
#  ServiceLinkedEsRole:
#    Type: AWS::IAM::ServiceLinkedRole
#    Properties:
#      AWSServiceName: es.amazonaws.com
#      Description: Role for ES to access resources in the VPC
#

Outputs:
#  CloudfrontOAI:
#    Value: !Ref CloudFrontOriginAccessIdentity
#
#  CloudfrontOAICanonicalUser:
#    Value: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
#
  CloudformationAdminRoleArn:
    Value: !GetAtt CloudformationAdminRole.Arn
  
  CloudformationExecutionRoleName:
    Value: !Ref CloudformationExecutionRole