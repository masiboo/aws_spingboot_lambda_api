AWSTemplateFormatVersion: 2010-09-09

Description: >
  Creates the deployment pipeline

Parameters:

  NamePrefix:
    Type: String
    Default: Aws
    Description: Prefix added to the name of resources created in this stack. It correspond to the service tag


  BudgetUnitCode:
    Type: String
    Default: madrid-Aws
    Description: The value for the budget-unit-code tag

  BusinessImpactLevel:
    Type: String
    Default: "2"
    AllowedValues:
      - "1"
      - "2"
      - "3"
      - "4"
    Description: The value for the business-impact-level tag

  BusinessOwner:
    Type: String
    Default: benoit.aperce@wipo.int
    Description: The value for the business-owner tag

  BusinessUnitName:
    Type: String
    Default: madrid
    Description: The value for the business-unit-name tag

  DataClassification:
    Type: String
    Default: confidential
    AllowedValues:
      - public
      - for_official_use_only
      - confidential
      - highly_confidential
    Description: The value for the data-classification tag

  TechnicalOwner:
    Type: String
    Default: don.onwunumah@wipo.int
    Description: The value for the technical-owner tag

  DRRegion:
    Type: String
    Default: eu-west-3
    Description: The disaster recovery region

  CicdAccount:
    Type: String
    Default: "173148697964"
    Description: The id of the cicd account

  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

Conditions:
  IsCicdAccount: !Equals [!Ref AWS::AccountId, "173148697964"]

Resources:

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Sub ${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      LifecycleConfiguration:
        Rules:
          - Id: NonCurrentAndIncompleteVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
          - Id: ExpireDevBuilds
            Status: Enabled
            Prefix: /
            ExpirationInDays: 90

  ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Id: !Sub ${NamePrefix}-artifacts-bucket-policy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action: 
              - s3:PutObject*
              - s3:ObjectOwnerOverrideToBucketOwner
            Resource: 
              - !Sub arn:aws:s3:::${ArtifactsBucket}/package.zip

  ArtifactsBucketPutPackageAndReadOnlyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-artifacts-bucket-readwrite-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}/*
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/package.zip
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}/package.zip
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*package.zip
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}/*package.zip
      Roles:
        - !Ref PipelineRole

  EcrRepositoryAwsMediaProcessor:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Only keep 20 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 20
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Sub ${NamePrefix}/media-process
      ImageScanningConfiguration:
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage

  EcrRepositoryAwsDBAccess:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Only keep 20 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 20
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Sub ${NamePrefix}/db-access
      ImageScanningConfiguration:
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage

  EcrRepositoryAwsEmailService:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Only keep 20 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 20
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Sub ${NamePrefix}/email-service
      ImageScanningConfiguration:
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage

  EcrRepositoryAwsMirisValidator:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Only keep 20 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 20
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Sub ${NamePrefix}/miris-proxy
      ImageScanningConfiguration:
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage


  EcrRepositoryAwsMediaProcessorSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/media-processEcrRepositoryUri
      Type: String
      Value: !Sub ${AWS::AccountId}.dkr.ecr.eu-central-1.amazonaws.com/Aws/media-process
      Description: The repository uri name

  EcrRepositoryAwsMediaProcessorNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/media-processEcrRepositoryName
      Type: String
      Value: !Sub ${NamePrefix}/media-process
      Description: The repository name

  EcrRepositoryAwsDBAccessSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/db-accessEcrRepositoryUri
      Type: String
      Value: !Sub ${AWS::AccountId}.dkr.ecr.eu-central-1.amazonaws.com/Aws/db-access
      Description: The repository uri name

  EcrRepositoryAwsDBAccessNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/db-accessEcrRepositoryName
      Type: String
      Value: !Sub ${NamePrefix}/db-access
      Description: The repository uri name


  EcrRepositoryAwsEmailServiceSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/email-serviceEcrRepositoryUri
      Type: String
      Value: !Sub ${AWS::AccountId}.dkr.ecr.eu-central-1.amazonaws.com/Aws/email-service
      Description: The repository uri name

  EcrRepositoryAwsEmailServiceNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/email-serviceEEcrRepositoryName
      Type: String
      Value: !Sub ${NamePrefix}/email-service
      Description: The repository name

  EcrRepositoryAwsMirisValidatorSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/miris-proxyEcrRepositoryUri
      Type: String
      Value: !Sub ${AWS::AccountId}.dkr.ecr.eu-central-1.amazonaws.com/Aws/miris-proxy
      Description: The repository uri name

  EcrRepositoryAwsMirisValidatorNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${NamePrefix}/miris-proxyEcrRepositoryName
      Type: String
      Value: !Sub ${NamePrefix}/miris-proxy
      Description: The repository name

  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-build-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Resource:
              - !GetAtt EcrRepositoryAwsMediaProcessor.Arn
              - !GetAtt EcrRepositoryAwsDBAccess.Arn
              - !GetAtt EcrRepositoryAwsEmailService.Arn
              - !GetAtt EcrRepositoryAwsMirisValidator.Arn
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/cicd/dockerhub*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
      Roles:
        - !Ref BuildRole

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-build-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  ReleaseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-release-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


  ArtifactsBucketReadWritePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-artifacts-bucket-readwrite-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:GetObject*
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:AbortMultipartUpload
              - s3:PutObjectVersionAcl
              - s3:DeleteObject
              - s3:PutObjectAcl
              - s3:ListMultipartUploadPart
              - s3:CreateMultipartUpload
              - s3:*
              - ec2:*
              - route53:*
              - secretsmanager:*
              - lambda:*
              - apigateway:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}/*
      Roles:
        - !Ref BuildRole
        - !Ref ReleaseLambdaRole
        - !Ref PipelineRole

  BuildRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudformation:*
              - events:*
              - iam:PassRole
              - kms:*
              - lambda:*
              - s3:*
              - ssm:*
              - sts:AssumeRole
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - arn:aws:s3:::Aws-artifacts-eu-central-1-${AWS::AccountId}
              - arn:aws:s3:::Aws-artifacts-eu-central-1-${AWS::AccountId}/*
          - Effect: Allow
            Action:
              - route53:ListHostedZonesByName
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BuildRolePolicy
      Roles:
        - !Ref BuildRole

  BuildProjectLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-build-logs-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

      Roles:
        - !Ref BuildRole

  BuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project
      Description: Aws-build-project
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: MEDIA_REPO
            Value: !Ref EcrRepositoryAwsMediaProcessor
          - Name: DBACCESS_REPO
            Value: !Ref EcrRepositoryAwsDBAccess
          - Name: EMAIL_REPO
            Value: !Ref EcrRepositoryAwsEmailService
          - Name: MIRIS_VALIDATOR_REPO
            Value: !Ref EcrRepositoryAwsMirisValidator
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2
            pre_build:
              commands:
                - ls -al
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - ls -al $CODEBUILD_SRC_DIR_EcrArtifactAwsMediaProcessor
                - ls -al $CODEBUILD_SRC_DIR_EcrArtifactAwsDBAccess
                - ls -al $CODEBUILD_SRC_DIR_EcrArtifactAwsEmailService
                - ls -al $CODEBUILD_SRC_DIR_EcrArtifactAwsMirisValidator
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - COMMIT=$(jq -r '.codeRepository.commit' cicd-package.json | head -c 8)
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - echo Building repository URLs
                - TAGCOMMIT=$(jq -r '.codeRepository.commit' cicd-package.json | head -c 7)
                - MEDIA_REPO_URI=${ARTIFACTS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${MEDIA_REPO}
                - TAGPREFIX="dev-"
                - MEDIA_REPO_TAG="$TAGPREFIX$TAGCOMMIT"
                - echo $(cat $CODEBUILD_SRC_DIR_EcrArtifactAwsMediaProcessor/imageDetail.json)
                - DBACCESS_REPO_URI=${ARTIFACTS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${DBACCESS_REPO}     
                - DBACCESS_REPO_TAG="$TAGPREFIX$TAGCOMMIT"
                - echo $(cat $CODEBUILD_SRC_DIR_EcrArtifactAwsDBAccess/imageDetail.json)
                - EMAIL_REPO_URI=${ARTIFACTS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${EMAIL_REPO}     
                - EMAIL_REPO_TAG="$TAGPREFIX$TAGCOMMIT"
                - echo $(cat $CODEBUILD_SRC_DIR_EcrArtifactAwsEmailService/imageDetail.json)
                - MIRIS_VALIDATOR_REPO_URI=${ARTIFACTS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${MIRIS_VALIDATOR_REPO}     
                - MIRIS_VALIDATOR_REPO_TAG="$TAGPREFIX$TAGCOMMIT"
                - echo $(cat $CODEBUILD_SRC_DIR_EcrArtifactAwsMirisValidator/imageDetail.json)
                - echo $MEDIA_REPO_URI
                - echo $MEDIA_REPO_TAG
            build:
              commands:
                - echo Building the parameters file...
                - touch templates/iac/master-parameters.json
                - ARTIFACTS_BUCKET=${PREFIX}-artifacts-${AWS_REGION}-${ARTIFACTS_ACCOUNT}
                - printf '{"Parameters":{' > templates/iac/master-parameters.json
                - printf '"BuildId":"%s",' $BUILD_ID >> templates/iac/master-parameters.json
                - printf '"BusinessUnitCodeName":"%s",' "${BUDGET_UNIT_CODE}" >> templates/iac/master-parameters.json
                - printf '"AppId":"%s",' "${APP_ID}" >> templates/iac/master-parameters.json
                - printf '"BusinessImpactLevelName":"%s",' "${BUSINESS_IMPACT_LEVEL}" >> templates/iac/master-parameters.json
                - printf '"BusinessOwnerName":"%s",' "${BUSINESS_OWNER}" >> templates/iac/master-parameters.json
                - printf '"BusinessUnitNameName":"%s",' "${BUSINESS_UNIT_NAME}" >> templates/iac/master-parameters.json
                - printf '"DataClassificationName":"%s",' "${DATA_CLASSIFICATION}" >> templates/iac/master-parameters.json
                - printf '"MediaImage":"%s:%s",' "${MEDIA_REPO_URI}" "${MEDIA_REPO_TAG}" >> templates/iac/master-parameters.json
                - printf '"DBAccessImage":"%s:%s",' "${DBACCESS_REPO_URI}" "${DBACCESS_REPO_TAG}" >> templates/iac/master-parameters.json
                - printf '"EmailImage":"%s:%s",' "${EMAIL_REPO_URI}" "${EMAIL_REPO_TAG}" >> templates/iac/master-parameters.json
                - printf '"MirisValidImage":"%s:%s",' "${MIRIS_VALIDATOR_REPO_URI}" "${MIRIS_VALIDATOR_REPO_TAG}" >> templates/iac/master-parameters.json
                - printf '"TechnicalOwnerName":"%s"' "${TECHNICAL_OWNER}" >> templates/iac/master-parameters.json
                - printf '},' >> templates/iac/master-parameters.json
                - printf '"Tags":{' >> templates/iac/master-parameters.json
                - printf '"budget-unit-code":"%s",' "${BUDGET_UNIT_CODE}" >> templates/iac/master-parameters.json
                - printf '"business-impact-level":"%s",' "${BUSINESS_IMPACT_LEVEL}" >> templates/iac/master-parameters.json
                - printf '"business-owner":"%s",' "${BUSINESS_OWNER}" >> templates/iac/master-parameters.json
                - printf '"business-unit-name":"%s",' "${BUSINESS_UNIT_NAME}" >> templates/iac/master-parameters.json
                - printf '"data-classification":"%s",' "${DATA_CLASSIFICATION}" >> templates/iac/master-parameters.json
                - printf '"service":"%s",' "${PREFIX}" >> templates/iac/master-parameters.json
                - printf '"technical-owner":"%s"}}' "${TECHNICAL_OWNER}" >> templates/iac/master-parameters.json
            post_build:
              commands:
                - echo Copying application, database and cloudFormation templates to S3
                - aws s3 cp --recursive artifacts s3://$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/
                - aws s3 cp --recursive templates s3://$ARTIFACTS_BUCKET/builds/$BUILD_ID/templates/
          artifacts:
            files:
              - '**/*'
            secondary-artifacts:
              BuildArtifact:
                files:
                  - templates/iac/template/master.yml
                  - templates/iac/master-parameters.json
        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  # DEV CodeBuilds
  BuildProjectVPCDev:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-dev-vpc
      Description: Aws-build-project-dev-vpc
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2

            pre_build:
              commands:
                - ls -al
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - cd templates/iac/Aws-api-prod-ts
                - npm install
                - cd -

            build:
              commands:
                - echo Building the cdk assets files... 1
                - cd templates/iac/Aws-api-prod-ts
                - echo Building the cdk assets files... 2
                - echo # Export environment variables from the JSON file
                - export $(jq -r '.Parameters | to_entries[] | "\(.key)=\(.value)"' templates/iac/master-parameters.json)
                - echo $BuildId
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk synth Aws-AwsCfnInfraVpcStack --require-approval never  --region eu-central-1 -o dev-out  > Aws-AwsCfnInfraVpcStack.yml
                - cd -

          artifacts:
            files:
              - '**/*'
            base-directory: 'templates/iac/Aws-api-prod-ts'
            exclude-paths: '**/node_modules/**/*'
            secondary-artifacts:
              VPCDevArtifact:
                base-directory: 'templates/iac/Aws-api-prod-ts'
                files:
                  - 'Aws-AwsCfnInfraVpcStack.yml'
                exclude-paths: '**/node_modules/**/*'
              CDKOutArtifact:
                base-directory: 'templates/iac/Aws-api-prod-ts/dev-out'
                files:
                  - '**/*'
        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  BuildProjectCodeDev:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-dev-code
      Description: Aws-build-project-dev-code
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2

            pre_build:
              commands:
                - ls -al $CODEBUILD_SRC_DIR_BuildArtifact/templates/iac
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - cd templates/iac/Aws-api-prod-ts
                - npm install
                - cd -

            build:
              commands:
                - echo Building the cdk assets files... 1
                - export IMAGETAG=$(jq -r '.Parameters.DBAccessImage | split(":")[1]' $CODEBUILD_SRC_DIR_BuildArtifact/templates/iac/master-parameters.json)
                - echo $IMAGETAG
                - cd templates/iac/Aws-api-prod-ts
                - echo Building the cdk assets files... 2
                - echo # Export environment variables from the JSON file
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk synth --require-approval never --region eu-central-1 -o dev-out
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsCfnInfraVpcStack.template.json --output-template dev-out/Aws-AwsCfnInfraVpcStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsInfraCfnBucketsECRStack.template.json --output-template dev-out/Aws-AwsInfraCfnBucketsECRStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsInfraRdsStack.template.json --output-template dev-out/Aws-AwsInfraRdsStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsCoreAlbServiceStack.template.json --output-template dev-out/Aws-AwsCoreAlbServiceStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsInfraECSClusterStack.template.json --output-template dev-out/Aws-AwsInfraECSClusterStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsInfraRegistryStack.template.json --output-template dev-out/Aws-AwsInfraRegistryStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsWafCloudFrontStack.template.json --output-template dev-out/Aws-AwsWafCloudFrontStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsCfnWafCdnStack.template.json --output-template dev-out/Aws-AwsCfnWafCdnStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsUsEastCertificateStack.template.json --output-template dev-out/Aws-AwsUsEastCertificateStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsCoreDBAccessStack.template.json --output-template dev-out/Aws-AwsCoreDBAccessStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsCoreMediaProcessStack.template.json --output-template dev-out/Aws-AwsCoreMediaProcessStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsCoreEmailSvctack.template.json --output-template dev-out/Aws-AwsCoreEmailSvctack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsCoreMirisProxyStack.template.json --output-template dev-out/Aws-AwsCoreMirisProxyStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsAuthStack.template.json --output-template dev-out/Aws-AwsAuthStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsApiV1Stack.template.json --output-template dev-out/Aws-AwsApiV1Stack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsApiV2Stack.template.json --output-template dev-out/Aws-AwsApiV2Stack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsEventsStack.template.json --output-template dev-out/Aws-AwsEventsStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsFrontEndStack.template.json --output-template dev-out/Aws-AwsFrontEndStack.yml
                - script/assets_package/upload_and_package_assets.sh --cdk-out-dir dev-out --s3-bucket "$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/" --synthesized-template dev-out/Aws-AwsApiDocsStack.template.json --output-template dev-out/Aws-AwsApiDocsStack.yml
                - cd -
            post_build:
              commands:
                - echo Copying application, database and cloudFormation templates to S3

          artifacts:
            files:
              - '**/*'
            base-directory: 'templates/iac/Aws-api-prod-ts/dev-out'
            secondary-artifacts:
              DevArtifact:
                discard-paths: yes
                files:
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsCfnInfraVpcStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsInfraCfnBucketsECRStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsInfraRdsStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsInfraECSClusterStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsInfraRegistryStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsWafCloudFrontStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsCoreAlbServiceStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsCfnWafCdnStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsCoreMirisProxyStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsUsEastCertificateStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsCoreDBAccessStack.yml
                  - templates/iac/Aws-api-prod-ts/dev-out/Aws-AwsCoreMediaProcessStack.yml
              CDKDevArtifact:
                base-directory: 'templates/iac/Aws-api-prod-ts'
                files:
                  - '**/*'
                exclude-paths: '**/node_modules/**/*'

        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  BuildProjectCDKDeployVPC:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-dev-deploy-vpc
      Description: Aws-build-project-dev-deploy-vpc
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2

            pre_build:
              commands:
                - ls -al
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - npm install

            build:
              commands:
                - echo Building the cdk assets files... 1
                - ls -al
                - npx aws-cdk deploy --app . Aws-AwsCfnInfraVpcStack --require-approval=never --verbose

        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED


  BuildProjectCDKDeployRegistry:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-dev-deploy-reg
      Description: Aws-build-project-dev-deploy-reg
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2

            pre_build:
              commands:
                - ls -al
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - npm install

            build:
              commands:
                - echo Building the cdk assets files... 1
                - ls -al
                - npx aws-cdk deploy --app dev-out Aws-AwsInfraRegistryStack --require-approval=never --verbose

        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  BuildProjectCDKDeployCerts:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-dev-deploy-cert
      Description: Aws-build-project-dev-deploy-cert
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2

            pre_build:
              commands:
                - ls -al
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - npm install

            build:
              commands:
                - echo Building the cdk assets files... 1
                - ls -al
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsUsEastCertificateStack --require-approval=never --verbose

        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  BuildProjectCDKDeployFunctions:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-dev-deploy-func
      Description: Aws-build-project-dev-deploy-func
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2

            pre_build:
              commands:
                - ls -al
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - npm install

            build:
              commands:
                - echo Building the cdk assets files... 1
                - ls -al
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsAuthStack --require-approval=never --verbose
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsApiV1Stack --require-approval=never --verbose
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsApiV2Stack --require-approval=never --verbose
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsEventsStack --require-approval=never --verbose
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsEventsStack --require-approval=never --verbose

        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  BuildProjectCDKDeployFrontEnd:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-dev-deploy-fe
      Description: Aws-build-project-dev-deploy-fe
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 14
              commands:
                - npm install -g aws-cdk@2

            pre_build:
              commands:
                - ls -al
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - COMMIT="0"
                - PREFIX=$PROJECT_PREFIX
                - if [ -f "cicd-package.json" ]; then COMMIT=$(jq -r '.build.number' cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g'); fi
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo $SHORT_SOURCE_VERSION
                - BUILD_ID=$DATE.$COMMIT.$SHORT_SOURCE_VERSION
                - aws sts get-caller-identity
                - npm install

            build:
              commands:
                - echo Building the cdk assets files... 1
                - ls -al
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsFrontEndStack --require-approval=never --verbose
                - export APP_CONFIG=config/app-config-infra-pipeline-dev.json; npx aws-cdk deploy --app dev-out Aws-AwsApiDocsStack --require-approval=never --verbose

        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  BuildProjectSelfMutateAcc:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - BuildProjectLogsPolicy
    Properties:
      Name: Aws-build-project-acc-selfmutate
      Description: Aws-build-project-acc-selfmutate
      # EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Image: aws/codebuild/standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: REGION
            Type: PLAINTEXT
            Value: eu-central-1
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: Aws
          - Name: PROJECT_STAGE
            Type: PLAINTEXT
            Value: dev
          - Name: PROJECT_PREFIX
            Type: PLAINTEXT
            Value: Aws
          - Name: ASSUME_ROLE_ARN
            Type: PLAINTEXT
            Value: ""
          - Name: ON_PIPELINE
            Type: PLAINTEXT
            Value: "YES"
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: |-
            version: 0.2
            phases:
              install:
                commands:
                  - npm install -g aws-cdk@2
              build:
                commands:
                  - cdk --app . deploy Aws-AwsInfrastructrePipelineStack --require-approval=never --verbose

        Type: CODEPIPELINE
      Tags:
        - Key: budget-unit-code
          Value: madrid-Aws
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED


  BuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${NamePrefix}/build
      RetentionInDays: 7

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-pipeline-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-codepipeline-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: "*"
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Effect: Allow
            Action:
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
              - lambda:*
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"
      Roles:
        - !Ref PipelineRole
        - !Ref BuildRole

  # PipeLineAssumeRolePolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: !Sub ${NamePrefix}-assume-role-policy
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - sts:AssumeRole
  #           Resource:
  #             - !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role

  #     Roles:
  #       - !Ref PipelineRole

  

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    # DependsOn: PipeLineAssumeRolePolicy
    Properties:
      Name: Aws-infrastructure-pipeline
      PipelineType: V2
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: S3
              Configuration:
                S3Bucket: !Ref ArtifactsBucket
                S3ObjectKey: package.zip
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
            - Name: EcrSourceAwsMediaProcessor
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !Ref EcrRepositoryAwsMediaProcessor
              OutputArtifacts:
                - Name: EcrArtifactAwsMediaProcessor
              RunOrder: 1
            - Name: EcrSourceAwsDBAccess
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !Ref EcrRepositoryAwsDBAccess
              OutputArtifacts:
                - Name: EcrArtifactAwsDBAccess
              RunOrder: 1
            - Name: EcrSourceAwsEmailService
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !Ref EcrRepositoryAwsEmailService
              OutputArtifacts:
                - Name: EcrArtifactAwsEmailService
              RunOrder: 1
            - Name: EcrSourceAwsMirisValidator
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !Ref EcrRepositoryAwsMirisValidator
              OutputArtifacts:
                - Name: EcrArtifactAwsMirisValidator
              RunOrder: 1
        # Dev - VPC Code Build
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
                PrimarySource: SourceArtifact
              RunOrder: 1
              InputArtifacts:
                - Name: SourceArtifact
                - Name: EcrArtifactAwsMediaProcessor
                - Name: EcrArtifactAwsDBAccess
                - Name: EcrArtifactAwsEmailService
                - Name: EcrArtifactAwsMirisValidator
              OutputArtifacts:
                - Name: BuildArtifact
            - Name: BuildVPC
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProjectVPCDev
                PrimarySource: SourceArtifact
              RunOrder: 1
              InputArtifacts:
                - Name: SourceArtifact
                - Name: EcrArtifactAwsMediaProcessor
                - Name: EcrArtifactAwsDBAccess
                - Name: EcrArtifactAwsEmailService
                - Name: EcrArtifactAwsMirisValidator
              OutputArtifacts:
                - Name: VPCDevArtifact
                - Name: CDKOutArtifact
        # Dev - Deploy VPC
        - Name: DeployVPCToDevelopment
          Actions:
            - Name: DeployVPCInfraStacks
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsCfnInfraVpcStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: VPCDevArtifact::Aws-AwsCfnInfraVpcStack.yml
                #ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: VPCDevArtifact
              RunOrder: 1
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role
        # Dev - Build-Code
        - Name: BuildToDevelopment
          Actions:
            - Name: BuildCodeDev
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProjectCodeDev
                PrimarySource: SourceArtifact
              RunOrder: 2
              InputArtifacts:
                - Name: SourceArtifact
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: DevArtifact
                - Name: CDKDevArtifact
        - Name: DeployCodesToDevelopment
          Actions:
            - Name: DeployVPCInfraStacks
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsCfnInfraVpcStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: VPCDevArtifact::Aws-AwsCfnInfraVpcStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: VPCDevArtifact
              RunOrder: 1
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role
            - Name: AwsInfraCfnBucketsECRStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsInfraCfnBucketsECRStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: DevArtifact::Aws-AwsInfraCfnBucketsECRStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: DevArtifact
              RunOrder: 2
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role
            - Name: AwsInfraRdsStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsInfraRdsStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: DevArtifact::Aws-AwsInfraRdsStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: DevArtifact
              RunOrder: 3
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role
            - Name: AwsInfraECSClusterStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsInfraECSClusterStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: DevArtifact::Aws-AwsInfraECSClusterStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: DevArtifact
              RunOrder: 4
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role

            - Name: AwsInfraRegistryStackDeploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProjectCDKDeployRegistry
                PrimarySource: CDKDevArtifact
              RunOrder: 5
              InputArtifacts:
                - Name: CDKDevArtifact
            - Name: AwsCfnWafCdnStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsCfnWafCdnStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: DevArtifact::Aws-AwsCfnWafCdnStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: DevArtifact
              RunOrder: 6
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role
            - Name: AwsCoreAlbServiceStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsCoreAlbServiceStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: DevArtifact::Aws-AwsCoreAlbServiceStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: DevArtifact
              RunOrder: 7
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role

            - Name: AwsUsEastCertificateStack
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProjectCDKDeployCerts
                PrimarySource: CDKDevArtifact
              RunOrder: 8
              InputArtifacts:
                - Name: CDKDevArtifact
            - Name: AwsCoreMediaProcessStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsCoreMediaProcessStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: DevArtifact::Aws-AwsCoreMediaProcessStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: DevArtifact
              RunOrder: 10
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role
            - Name: AwsCoreDBAccessStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub ${NamePrefix}-AwsCoreDBAccessStack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: DevArtifact::Aws-AwsCoreDBAccessStack.yml
                ##ParameterOverrides: !Sub '{"NamePrefix": "${NamePrefix}"}'
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-deployment-role
              InputArtifacts:
                - Name: DevArtifact
              RunOrder: 10
              # RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cicd-role
            - Name: AwsAuthEventsV1V2Stack
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProjectCDKDeployFunctions
                PrimarySource: CDKDevArtifact
              RunOrder: 16
              InputArtifacts:
                - Name: CDKDevArtifact
              # BuildProjectCDKDeployFrontEnd
            - Name: AwsApiDocFrontEndStack
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProjectCDKDeployFrontEnd
                PrimarySource: CDKDevArtifact
              RunOrder: 18
              InputArtifacts:
                - Name: CDKDevArtifact

  PipelineEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${NamePrefix}-ecr-event-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}

  PipelineEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref ArtifactsBucket
          object:
            key:
              - "package.zip"
      Name: !Join ["-", [!Ref NamePrefix, !Ref Pipeline]]
      State: ENABLED
      Targets:
        - Arn:
            !Join [
              "",
              [
                "arn:aws:codepipeline:",
                !Ref "AWS::Region",
                ":",
                !Ref "AWS::AccountId",
                ":",
                !Ref Pipeline,
              ],
            ]
          RoleArn: !GetAtt PipelineEventRole.Arn
          Id: !Join ["-", ["codepipeline", !Ref Pipeline]]


Outputs:
  ArtifactsBucket:
    Description: "The name of the artifact bucket"
    Value: !Ref ArtifactsBucket

  ArtifactsBucketArn:
    Description: "The Arn of the artifact bucket"
    Value: !GetAtt ArtifactsBucket.Arn
