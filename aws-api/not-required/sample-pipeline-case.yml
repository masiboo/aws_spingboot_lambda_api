AWSTemplateFormatVersion: 2010-09-09

Description: > 
  Creates the CASE Service deployment pipeline

Parameters:

  NamePrefix:
    Description: Prefix added to the name of resources created in this stack. It correspond to the service tag
    Type: String

  Environment:
    Description: "Environment type (controls various parameters of the deployment, ip ranges, size of the EC2 instances, tags, etc.)"
    Type: String
    AllowedValues: [dev, acc, prd]

  ArtifactsBucketNVirginia:
    Description: "Artifact bucket in us-east-1"
    Type: String

  KMSKeyNVirginiaArn:
    Description: "KMS key of the artifact bucket in us-east-1"
    Type: String

  DevelopmentAccount:
    Description: The id of the development account
    Type: String
    AllowedPattern: '^\d{12}$'
    Default: '452010797180'
    
  AcceptanceAccount:
    Description: The id of the acceptance account
    Type: String
    AllowedPattern: '^\d{12}$'
    Default: '329803703153'

  ProductionAccount:
    Description: The id of the production account
    Type: String
    AllowedPattern: '^\d{12}$'
    Default: '329803703153'
    
  BudgetUnitCode:
    Description: The value for the budget-unit-code tag
    Type: String
    Default: '0048'
  
  BusinessImpactLevel: 
    Description: The value for the business-impact-level tag
    Type: String
    AllowedValues: ['1', '2', '3', '4']
    Default: '2'
                
  BusinessOwner: 
    Description: The value for the business-owner tag
    Type: String
    Default: 'william.meredith@aws.int'
  
  BusinessUnitName: 
    Description: The value for the business-unit-name tag
    Type: String
    Default: 'IP Office Business Solutions'

  DataClassification: 
    Description: The value for the data-classification tag
    Type: String
    AllowedValues: ['public', 'for_official_use_only', 'confidential', 'highly_confidential']
    Default: 'confidential'

  TechnicalOwner: 
    Description: The value for the technical-owner tag
    Type: String
    Default: 'daniel.cheng@aws.int'

  Service:
    Description: Value of the service tag
    Type: String
    Default: 'case'
    
  ExternalId:
   Description: The external id to assume the cicd role from the identity account
   Type: String
   Default: '8mjH._,,W1n/ufL9'
   NoEcho: true

  CicdRoleArn:
    Description: Cicd role that will put artifact to the bucket
    Type: String
    Default: none
    # CICD role => arn:aws:iam::173148697964:role/cicd-case

  Section:
    Description: Value of the section tag
    Type: String
    Default: 'ipobs'

Mappings:
  
  Constant:
    Account:
      Cicd: '173148697964'
        
Conditions:

  isCicd: !Equals [!FindInMap [ Constant, Account, Cicd ], !Ref AWS::AccountId]
  # isCicd: !Equals [!Ref CicdAccount, !Ref AWS::AccountId]
  isNotCicd: !Not [Condition: isCicd]

  noCicdRoleArn: !Equals [!Ref CicdRoleArn, 'none']
  noArtifactsBucketNVirginia: !Equals [!Ref ArtifactsBucketNVirginia, 'none'] 
  isArtifactsBucketNVirginia:  !Not [Condition: noArtifactsBucketNVirginia]

Resources:

  KMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: Used by Assumed Roles in dev/acc/prd accounts to Encrypt/Decrypt artifacts
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:UntagResource
              - kms:TagResource
            Resource: "*"
          - Sid: Allow use of the key by specific roles
            Effect: Allow
            Principal:
              AWS: 
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !GetAtt BuildRole.Arn
                - !GetAtt PipelineRole.Arn
                - !If [noCicdRoleArn, !Sub '${CicdRole.Arn}' ,!Ref CicdRoleArn]
                # Next need to be removed when cicd will switch to case-role
                - !If [noCicdRoleArn, !Ref AWS::NoValue , 'arn:aws:iam::173148697964:role/cicd-ipas']
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
              - kms:UntagResource
              - kms:TagResource
            Resource: "*"
          - Sid: Allow use of the key by other accounts
            Effect: Allow
            Principal:
              AWS: 
                - !Sub arn:aws:iam::${DevelopmentAccount}:root
                - !Sub arn:aws:iam::${AcceptanceAccount}:root
                - !Sub arn:aws:iam::${ProductionAccount}:root
            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: "*"

  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${NamePrefix}-crossaccount-cmk
      TargetKeyId: !Ref KMSKey

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KMSKey.Arn
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
        # - ObjectOwnership: BucketOwnerPreferred        
        - ObjectOwnership: BucketOwnerEnforced        
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Id: !Sub ${NamePrefix}-artifacts-bucket-policy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                - !Sub arn:aws:iam::${DevelopmentAccount}:root
                - !Sub arn:aws:iam::${AcceptanceAccount}:root
                - !Sub arn:aws:iam::${ProductionAccount}:root
            Action: 
              - s3:ListBucket
              - s3:GetObject
            Resource: 
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
          - Effect: Allow
            Principal:
              AWS: 
                - !If [noCicdRoleArn, !Sub '${CicdRole.Arn}' ,!Ref CicdRoleArn]
                # Next need to be removed when cicd will switch to case-role
                - !If [noCicdRoleArn, !Ref AWS::NoValue , 'arn:aws:iam::173148697964:role/cicd-ipas']
            Action:
              - s3:PutObject*
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-build-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-pipeline-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  CicdRole:
    Condition: noCicdRoleArn
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cicd-${NamePrefix}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::397773125075:root
            Condition:
              StringEquals:
                sts:ExternalId: !Ref ExternalId
            Action:
              - sts:AssumeRole
      Path: /

  CmkPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-cmk-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource:
              - !GetAtt KMSKey.Arn
              - !If 
                - isArtifactsBucketNVirginia  
                - !Ref KMSKeyNVirginiaArn
                - !Ref AWS::NoValue
      Roles:
        - !Ref BuildRole
        - !If [noCicdRoleArn, !Ref CicdRole, !Ref AWS::NoValue]

  ArtifactsBucketPutPackageAndReadOnlyPolicy:
    Condition: noCicdRoleArn
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-artifacts-bucket-readwrite-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/package.zip
      Roles:
        - !Ref CicdRole

  ArtifactsBucketReadWritePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-artifacts-bucket-readwrite-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
      Roles:
        - !Ref BuildRole

  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-build-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - ecr:GetAuthorizationToken
            Resource: '*'            
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
      Roles:
        - !Ref BuildRole
        
  BuildProjectSam:
    Type: AWS::CodeBuild::Project
    DependsOn: BuildProjectPolicy
    Properties:
      Description: !Sub '${NamePrefix}-build-nodejs'
      EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: ARTIFACTS_BUCKET
            Value: !Sub '${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}'
          - Name: BUDGET_UNIT_CODE
            Value: !Ref BudgetUnitCode
          - Name: BUSINESS_IMPACT_LEVEL
            Value: !Ref BusinessImpactLevel
          - Name: BUSINESS_OWNER
            Value: !Ref BusinessOwner
          - Name: BUSINESS_UNIT_NAME
            Value: !Ref BusinessUnitName
          - Name: DATA_CLASSIFICATION
            Value: !Ref DataClassification
          - Name: SERVICE
            Value: !Ref Service
          - Name: TECHNICAL_OWNER
            Value: !Ref TechnicalOwner
          - Name: TEMPLATES_SOURCE_PATH
            Value: templates/iac
          - Name: ARTIFACTS_INPUT_PATH
            Value: TO_BE_SET
          - Name: ARTIFACTS_OUTPUT_TEMPLATE
            Value: TO_BE_SET
          - Name: SECTION
            Value: !Ref Section
          - Name: ENVIRONMENT
            Value: !Ref Environment
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                # Change to app folder
                - cd $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH
                # Install python crhelper dependencies in crpy folder for cloudformation custom resources
                - python -m pip install --upgrade pip
                - pip install -t ./crpy crhelper
                # Install latest npm
                - npm install --location=global npm@latest
            pre_build:
              commands:
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - printf "# Date %s\n" $DATE
                - ls -al $CODEBUILD_SRC_DIR
                - CICD_BUILD_ID="0"
                - if [ -f "$CODEBUILD_SRC_DIR/cicd-package.json" ]; then 
                    cat $CODEBUILD_SRC_DIR/cicd-package.json;
                    CICD_BUILD_ID=$(jq -r '.builds[0].number' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g');
                    SYSTEM_NAME=$(jq -r '.systemName' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g' | sed 's/$.*/0/g');
                    SYSTEM_VERSION=$(jq -r '.systemVersion' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g' | sed 's/$.*/0/g');
                    BUILD_NUMBER=$(jq -r '.builds[0].number' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_NUMBER/0/g' | sed 's/$.*/0/g');
                    BUILD_DATE_TIME=$(jq -r '.builds[0].date' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_DATE_TIME/0/g' | sed 's/$.*/0/g');
                    BUILD_PLAN=$(jq -r '.builds[0].plan' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g' | sed 's/BUILD_PLAN/0/g' | sed 's/$.*/0/g');
                    CODE_REPO_BRANCH_NAME=$(jq -r '.codeRepository.branch' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g'  | sed 's/$.*/0/g');
                    CODE_REPO_COMMIT=$(jq -r '.codeRepository.commit' $CODEBUILD_SRC_DIR/cicd-package.json | sed 's/null/0/g'  | sed 's/$.*/0/g');
                  fi
                - if [ "$CICD_BUILD_ID" != "0" ]; then
                    BUILD_ID=$CICD_BUILD_ID;
                  else
                    SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8);
                    BUILD_ID=$DATE.$CICD_BUILD_ID.$SHORT_SOURCE_VERSION;
                  fi
                - echo SYSTEM_NAME:$SYSTEM_NAME
                - echo SYSTEM_VERSION:$SYSTEM_VERSION
                - echo BUILD_NUMBER:$BUILD_NUMBER
                - echo BUILD_DATE_TIME:$BUILD_DATE_TIME
                - echo BUILD_PLAN:$BUILD_PLAN
                - echo CODE_REPO_BRANCH_NAME:$CODE_REPO_BRANCH_NAME
                - echo CODE_REPO_COMMIT:$CODE_REPO_COMMIT
                - printf "# BUILD_ID %s\n" $BUILD_ID
                # Change to app folder
                - cd $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH
                # Get node modules 
                - npm ci
                # Build by running Typescript compiler
                - npm run build

                # added to support copying of anti-virus scan lib files in right folder
                - mkdir -p $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/handlers/antivirus-scan/lib
                - cp -R $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/src/handlers/antivirus-scan/lib $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/handlers/antivirus-scan
                - mkdir -p $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/asset
                - cp -R $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/src/asset/documentName.json $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/asset/documentName.json
                - cp -R $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/src/asset/offices-rest-endpoints-local.json $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/asset/offices-rest-endpoints-local.json
                - cp -R $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/src/asset/offices-rest-endpoints-prd.json $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/asset/offices-rest-endpoints-prd.json
                - cp -R $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/src/asset/offices-rest-endpoints-dev.json $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/asset/offices-rest-endpoints-dev.json
                - cp -R $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/src/asset/offices-rest-endpoints-acc.json $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/asset/offices-rest-endpoints-acc.json
                - cp -R $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/src/asset/DE-Cert.pem $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/dist/asset/DE-Cert.pem

                # Discover and run unit tests in the '__tests__' directory
                #- npm run test
                # Remove all unit tests to reduce the size of the package that will be ultimately uploaded to Lambda
                - rm -rf ./__tests__
            build:
              commands:
                # Building master-parameter json file
                - find $CODEBUILD_SRC_DIR/$TEMPLATES_SOURCE_PATH
                - MASTER_PARAMETERS_FILE=$CODEBUILD_SRC_DIR/$TEMPLATES_SOURCE_PATH/master-parameters.json
                - printf '{"Parameters":{' > $MASTER_PARAMETERS_FILE
                - printf '"NamePrefix":"%s",' $PREFIX >> $MASTER_PARAMETERS_FILE
                - printf '"Service":"%s",' "${SERVICE}" >> $MASTER_PARAMETERS_FILE
                - printf '"BuildId":"%s",' $BUILD_ID >> $MASTER_PARAMETERS_FILE
                - printf '"SystemName":"%s",' "${SYSTEM_NAME}" >> $MASTER_PARAMETERS_FILE
                - printf '"SystemVersion":"%s",' "${SYSTEM_VERSION}" >> $MASTER_PARAMETERS_FILE
                - printf '"BuildNumber":"%s",' "${BUILD_NUMBER}" >> $MASTER_PARAMETERS_FILE
                - printf '"BuildDateTime":"%s",' "${BUILD_DATE_TIME}" >> $MASTER_PARAMETERS_FILE
                - printf '"BuildPlan":"%s",' "${BUILD_PLAN}" >> $MASTER_PARAMETERS_FILE
                - printf '"CodeRepoBranchName":"%s",' "${CODE_REPO_BRANCH_NAME}" >> $MASTER_PARAMETERS_FILE
                - printf '"CodeRepoCommitId":"%s",' "${CODE_REPO_COMMIT}" >> $MASTER_PARAMETERS_FILE
                - printf '"BuildDate":"%s"' $(date '+%Y%m%d-%H%M') >> $MASTER_PARAMETERS_FILE
                - printf '},' >> $MASTER_PARAMETERS_FILE
                - printf '"Tags":{' >> $MASTER_PARAMETERS_FILE
                - printf '"budget-unit-code":"%s",' "${BUDGET_UNIT_CODE}" >> $MASTER_PARAMETERS_FILE
                - printf '"business-unit-name":"%s",' "${BUSINESS_UNIT_NAME}" >> $MASTER_PARAMETERS_FILE
                - printf '"business-impact-level":"%s",' "${BUSINESS_IMPACT_LEVEL}" >> $MASTER_PARAMETERS_FILE
                - printf '"business-owner":"%s",' "${BUSINESS_OWNER}" >> $MASTER_PARAMETERS_FILE
                - printf '"technical-owner":"%s",' "${TECHNICAL_OWNER}" >> $MASTER_PARAMETERS_FILE
                - printf '"section":"%s",' "${SECTION}" >> $MASTER_PARAMETERS_FILE
                - printf '"business-service":"%s",' "${SERVICE}" >> $MASTER_PARAMETERS_FILE
                - printf '"service":"%s",' "${SERVICE}" >> $MASTER_PARAMETERS_FILE                
                - printf '"data-classification":"%s",' "${DATA_CLASSIFICATION}" >> $MASTER_PARAMETERS_FILE
                - printf '"environment":"%s"}}' "${ENVIRONMENT}" >> $MASTER_PARAMETERS_FILE
                - cat $MASTER_PARAMETERS_FILE
                # Building CloudFormation template from SAM template"
                - cd $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH
                # Use AWS SAM to package the application by using AWS CloudFormation
                - sam package --no-progressbar --template $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/template.yml --s3-bucket $ARTIFACTS_BUCKET --s3-prefix builds/packaged/$ARTIFACTS_INPUT_PATH --output-template-file $CODEBUILD_SRC_DIR/$TEMPLATES_SOURCE_PATH/$ARTIFACTS_OUTPUT_TEMPLATE
                - sam package --no-progressbar --template $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/template-antivirus-scan.yml --s3-bucket $ARTIFACTS_BUCKET --s3-prefix builds/packaged/$ARTIFACTS_INPUT_PATH --output-template-file $CODEBUILD_SRC_DIR/$TEMPLATES_SOURCE_PATH/case-antivirus-scanning-app.yml
                - sam package --no-progressbar --template $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH/template-case-sm.yml --s3-bucket $ARTIFACTS_BUCKET --s3-prefix builds/packaged/$ARTIFACTS_INPUT_PATH --output-template-file $CODEBUILD_SRC_DIR/$TEMPLATES_SOURCE_PATH/case-portal-statemachine-app.yml
            post_build:
              commands:
                # Change to app folder
                - cd $CODEBUILD_SRC_DIR/$ARTIFACTS_INPUT_PATH
                # Removing generated npm files before copying to S3
                - rm -rf ./__tests__ ./package-lock.json ./node_modules/
                # Copying application to S3
                - aws s3 cp --quiet --recursive $CODEBUILD_SRC_DIR/. s3://$ARTIFACTS_BUCKET/builds/$BUILD_ID
                - aws s3 cp --quiet $CODEBUILD_SRC_DIR/cicd-package.json s3://$ARTIFACTS_BUCKET/${PREFIX}-api.json
          artifacts:
            files: 
              - $TEMPLATES_SOURCE_PATH/**/*
      TimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED


  BuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${NamePrefix}/build
      RetentionInDays: 7

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-codepipeline-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: '*'
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Effect: Allow
            Action:
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
              - kms:*
            Resource: '*'
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: '*'
          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: '*'
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: '*'
      Roles:
        - !Ref PipelineRole

  AssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-assume-role-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-cicd-role
              - !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
              - !Sub arn:aws:iam::${ProductionAccount}:role/${NamePrefix}-cicd-role
      Roles:
        - !Ref PipelineRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: AssumeRolePolicy
    Properties:
      RoleArn:
        !GetAtt PipelineRole.Arn
      Name: !Ref NamePrefix
      ArtifactStores:
        - ArtifactStore:
            Type: S3
            Location: !Ref ArtifactsBucket
            EncryptionKey:
              Id: !GetAtt KMSKey.Arn
              Type: KMS
          Region: !Ref AWS::Region
        - !If 
          - isArtifactsBucketNVirginia  
          - ArtifactStore:
              Type: S3
              Location: !Ref ArtifactsBucketNVirginia
              EncryptionKey:
                Id: !Ref KMSKeyNVirginiaArn
                Type: KMS
            Region: 'us-east-1'
          - !Ref AWS::NoValue  
      DisableInboundStageTransitions:
        - !If
          - isCicd
          - StageName: DeployToProduction
            Reason: DeployOnceApproved
          - !Ref AWS::NoValue
      Stages:
        - Name: Source
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: S3
              Configuration:
                S3Bucket: !Ref ArtifactsBucket
                S3ObjectKey: package.zip
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProjectSam
                PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub |
                  [{"name":"ARTIFACTS_INPUT_PATH","value":"artifacts/case-app"}
                  ,{"name":"ARTIFACTS_OUTPUT_TEMPLATE","value":"case-app.yml"}]
              RunOrder: 4
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - !If
          - isNotCicd
          - Name: DeployToDevelopment
            Actions:
              - Name: Deploy
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: '1'
                  Provider: CloudFormation
                Configuration:
                  ActionMode: CREATE_UPDATE
                  StackName: !Sub ${NamePrefix}-app
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.yml
                  ParameterOverrides: !Sub '{"Environment": "dev", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-deployment-role 
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 1
                RoleArn: !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-cicd-role
          - !Ref AWS::NoValue
        - !If
          - isCicd
          - Name: DeployToAcceptance
            Actions:
              - Name: DeployAPI
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: '1'
                  Provider: CloudFormation
                Configuration:
                  ActionMode: CREATE_UPDATE
                  StackName: !Sub ${NamePrefix}-app
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.yml
                  ParameterOverrides: !Sub '{"Environment": "acc", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-deployment-role 
                InputArtifacts:
                  - Name: BuildArtifact
                Namespace: DeployAPI              
                RunOrder: 1
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
              - Name: DeployCdnNVirginia
                Region: "us-east-1"
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: '1'
                  Provider: CloudFormation
                Configuration:
                  ActionMode: CREATE_UPDATE
                  StackName: !Sub ${NamePrefix}-cdn-nvirginia
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/cdn-nvirginia.yml
                  ParameterOverrides: !Sub '{"Environment": "acc", "ArtifactsAccount": "${AWS::AccountId}", "PublicHostedZoneId": "#{DeployAPI.PublicHostedZoneId}", "PublicHostedZoneName": "#{DeployAPI.PublicHostedZoneName}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-deployment-role 
                InputArtifacts:
                  - Name: BuildArtifact
                Namespace: DeployCdnNVirginia
                RunOrder: 2
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role             
              - Name: DeployCdn
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: '1'
                  Provider: CloudFormation
                Configuration:
                  ActionMode: CREATE_UPDATE
                  StackName: !Sub ${NamePrefix}-cdn
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/cdn.yml
                  ParameterOverrides: !Sub '{"Environment": "acc", "ArtifactsAccount": "${AWS::AccountId}", "CdnCertificateArn": "#{DeployCdnNVirginia.CdnCertificateArn}", "CdnCertificateAliases": "#{DeployCdnNVirginia.CdnCertificateAlias}", "CdnIdentifier": "cdn", "LogsBucket": "#{DeployAPI.LogsBucket}", "PublicHostedZoneName": "#{DeployAPI.PublicHostedZoneName}", "ExternalApiDns": "#{DeployAPI.ExternalApiDns}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-deployment-role 
                InputArtifacts:
                  - Name: BuildArtifact
                Namespace: DeployCdn
                RunOrder: 3
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role                                          
          - !Ref AWS::NoValue
        - !If
          - isCicd
          - Name: DeployToProduction
            Actions:
              - Name: Deploy
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: '1'
                  Provider: CloudFormation
                Configuration:
                  ActionMode: CREATE_UPDATE
                  StackName: !Sub ${NamePrefix}-app
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.yml
                  ParameterOverrides: !Sub '{"Environment": "prd", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${ProductionAccount}:role/${NamePrefix}-deployment-role 
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 1
                RoleArn: !Sub arn:aws:iam::${ProductionAccount}:role/${NamePrefix}-cicd-role             
          - !Ref AWS::NoValue

             
Outputs:

  ArtifactsBucket:
    Description: "The name of the artifact bucket"
    Value: !Ref ArtifactsBucket

  ArtifactsBucketArn:
    Description: "The Arn of the artifact bucket"
    Value: !GetAtt ArtifactsBucket.Arn

  KMSKeyArn:
    Description: "The Arn of the KMS key"
    Value: !GetAtt KMSKey.Arn
