AWSTemplateFormatVersion: 2010-09-09

Description: Creates the pipeline for sixter deployment

Parameters:
  NamePrefix:
    Description: Prefix added to the name of resources created in this stack. It correspond to the service tag
    Type: String
    Default: "mmp"

  EnableDeploymentToDev:
    Description: Enables the deployment of the app stack to the development account. When disabled it removes the existing stack
    Type: String
    AllowedValues: [true, false]
    Default: true

  EnableDeploymentToAcc:
    Description: Enables the deployment of the app stack to the acceptance account. When disabled it removes the existing stack
    Type: String
    AllowedValues: [true, false]
    Default: false

  DevelopmentAccount:
    Description: The id of the development account
    Type: String
    Default: "551493771163"

  AcceptanceAccount:
    Description: The id of the acceptance account
    Type: String
    Default: "489962969526"

  ProductionAccount:
    Description: The id of the production account
    Type: String
    Default: "278720074780"

  BudgetUnitCode:
    Description: The value for the budget-unit-code tag
    Type: String
    Default: "emadrid"

  BusinessImpactLevel:
    Description: The value for the business-impact-level tag
    Type: String
    AllowedValues: ["1", "2", "3", "4"]
    Default: "2"

  BusinessOwner:
    Description: The value for the business-owner tag
    Type: String
    Default: "benoit.aperce@wipo.int"

  BusinessUnitName:
    Description: The value for the business-unit-name tag
    Type: String
    Default: "madrid"

  DataClassification:
    Description: The value for the data-classification tag
    Type: String
    AllowedValues:
      ["public", "for_official_use_only", "confidential", "highly_confidential"]
    Default: "confidential"

  TechnicalOwner:
    Description: The value for the technical-owner tag
    Type: String
    Default: "dan.savu@wipo.int"

  DRRegion:
    Type: String
    Description: The disaster recovery region
    Default: "eu-west-3"

  CicdRole:
    Description: Role to assume to push the artifacts
    Type: String
    Default: "cicd-emadrid"

  CicdAccount:
    Description: The id of the cicd account
    Type: String
    Default: "173148697964"

Conditions:
  EnableDeploymentToDev: !Equals [!Ref EnableDeploymentToDev, true]
  EnableDeploymentToAcc: !Equals [!Ref EnableDeploymentToAcc, true]
  IsCicdAccount: !Equals [!Ref AWS::AccountId, "173148697964"]

Resources:
  ### TODO ###
  KMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: Used by Assumed Roles in dev/acc/prd accounts to Encrypt/Decrypt artifacts
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: Allow use of the key to other accounts
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${CicdAccount}:root
                - !GetAtt BuildRole.Arn
                - !GetAtt PipelineRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          - Sid: Allow use of the key to other accounts
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${DevelopmentAccount}:root
                - !Sub arn:aws:iam::${AcceptanceAccount}:root
                - !Sub arn:aws:iam::${ProductionAccount}:root
            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: "*"

  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${NamePrefix}-crossaccount-cmk
      TargetKeyId: !Ref KMSKey

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${NamePrefix}-artifacts-${AWS::Region}-${AWS::AccountId}
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: NonCurrentAndIncompleteVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
          - Id: ExpirePipelineArtifacts
            Status: Enabled
            ExpirationInDays: 30
  ### TODO ###
  ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Id: !Sub ${NamePrefix}-artifacts-bucket-policy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${CicdAccount}:root
                - !Sub arn:aws:iam::${DevelopmentAccount}:root
                - !Sub arn:aws:iam::${AcceptanceAccount}:root
                - !Sub arn:aws:iam::${ProductionAccount}:root
                - !GetAtt PipelineRole.Arn
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject*
              - s3:ObjectOwnerOverrideToBucketOwner
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action:
              - s3:List*
              - s3:GetBucketVersioning
              - s3:PutBucketVersioning
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
  ### TODO ###
  PushImagesPolicy:
    Condition: IsCicdAccount
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-push-images-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Resource:
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${NamePrefix}/*"
              - !Sub "arn:aws:ecr:${AWS::Region}:${DevelopmentAccount}:repository/${NamePrefix}/*"
      Roles:
        - !Ref CicdRole
  ### TODO ###
  PutPackagePolicy:
    Condition: IsCicdAccount
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-put-package-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}/package.zip
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${AWS::Region}-${DevelopmentAccount}/package.zip
      Roles:
        - !Ref CicdRole

  CmkPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-cmk-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt KMSKey.Arn
      Roles:
        #        - !Ref CicdRole
        - !Ref BuildRole

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-build-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-build-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Resource:
              - !GetAtt EcrRepositoryMMPBackofficeApp.Arn
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/cicd/dockerhub*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
      Roles:
        - !Ref BuildRole

  BuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: BuildProjectPolicy
    Properties:
      Name: !Sub ${NamePrefix}-build
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: REPOSITORY_MMPBACK
            Value: TO_BE_SET
          - Name: REPOSITORY_MMPFRONT
            Value: TO_BE_SET
        PrivilegedMode: false
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
              commands:
                - python -m venv venv
                - source venv/bin/activate
                - pip install --upgrade pip
                - pip install awscli
            pre_build:
              commands:
                - echo Retrieving information from artifacts...
                - DATE=$(date '+%y-%m-%d')
                - ls -al $CODEBUILD_SRC_DIR
                - ls -al $CODEBUILD_SRC_DIR_EcrArtifactMMPBackOffice
                - ls -al $CODEBUILD_SRC_DIR_EcrArtifactMMPBackOffice
                - cat $CODEBUILD_SRC_DIR_EcrArtifactMMPBackOffice/imageDetail.json
                - COMMIT=$(jq -r '.codeRepository.commit' cicd-package.json | head -c 8)
                - echo commit $COMMIT
                - SHORT_SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - BUILD_ID=$DATE.$SHORT_SOURCE_VERSION
                - echo Building repository URLs
                - ECR_MMP_BACK_URI=${ARTIFACTS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPOSITORY_MMPBACK}
                #- ECR_MMP_BACK_TAG=$(cat $CODEBUILD_SRC_DIR_EcrArtifactMMPBackOffice/imageDetail.json | jq -r '.ImageTags[] | select(startswith("latest") | not)')
                - ECR_MMP_BACK_TAG=latest
                - ECR_MMP_FRONT_URI=${ARTIFACTS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPOSITORY_MMPFRONT}
                #- ECR_MMP_FRONT_TAG=$(cat $CODEBUILD_SRC_DIR_EcrArtifactMMPFrontOffice/imageDetail.json | jq -r '.ImageTags[] | select(startswith("latest") | not)')
                - ECR_MMP_FRONT_TAG=latest
            build:
              commands:
                - echo Building the parameters file...
                - ARTIFACTS_BUCKET=${PREFIX}-artifacts-${AWS_REGION}-${ARTIFACTS_ACCOUNT}
                # AWS CloudFormation Artifacts (Template Configuration File)
                # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html
                - printf '{"Parameters":{' > templates/iac/master-parameters.json
                - printf '"BuildId":"%s",' $BUILD_ID >> templates/iac/master-parameters.json
                - printf '"MMPBackOfficeImage":"%s:%s",' $ECR_MMP_BACK_URI $ECR_MMP_BACK_TAG >> templates/iac/master-parameters.json
                - printf '"MMPFrontOfficeImage":"%s:%s"' $ECR_MMP_FRONT_URI $ECR_MMP_FRONT_TAG >> templates/iac/master-parameters.json
                - printf '},' >> templates/iac/master-parameters.json
                - printf '"Tags":{' >> templates/iac/master-parameters.json
                - printf '"service":"%s"}}' "${PREFIX}" >> templates/iac/master-parameters.json
                - cat templates/iac/master-parameters.json
            post_build:
              commands:
                - echo Copying application, database and cloudFormation templates to S3
                - aws s3 cp --recursive artifacts s3://$ARTIFACTS_BUCKET/builds/$BUILD_ID/artifacts/
                - aws s3 cp --recursive templates s3://$ARTIFACTS_BUCKET/builds/$BUILD_ID/templates/
          artifacts:
            files:
            - '**/*'
            secondary-artifacts:
              BuildArtifact:
                files:
                - templates/iac/master.yml
                - templates/iac/master-parameters.json
                - templates/iac/master.*.yml
              WebsiteArtifact:
                files:
                  - '**/*'
                base-directory: artifacts/frontoffice-ui/dist
  BuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${NamePrefix}/build
      RetentionInDays: 7

  PostDevDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-post-dev-deployment-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  PostDevDeploymentProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-post-dev-deployment-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
      Roles:
        - !Ref PostDevDeploymentRole

  PostDevDeploymentProject:
    Type: AWS::CodeBuild::Project
    DependsOn: PostDevDeploymentProjectPolicy
    Properties:
      Name: !Sub ${NamePrefix}-post-dev-deployment
      EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt PostDevDeploymentRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
        PrivilegedMode: false
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Retrieving Build ID...
                - BUILD_ID=$(cat $CODEBUILD_SRC_DIR/templates/iac/master-parameters.json | jq -r .Parameters.BuildId)
                - echo $BUILD_ID
            build:
              commands:
                - ARTIFACTS_BUCKET=${PREFIX}-artifacts-${AWS_REGION}-${ARTIFACTS_ACCOUNT}
                # - echo Tagging build artifacts...
                # - aws s3api list-objects --bucket $ARTIFACTS_BUCKET --query 'Contents[].{Key:Key}' --prefix builds/$BUILD_ID/ --output text | xargs -n 1 aws s3api put-object-tagging --bucket $ARTIFACTS_BUCKET --tagging 'TagSet=[{Key=environment,Value=dev}]' --key
      TimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref PostDevDeploymentLogGroup
          Status: ENABLED

  PostDevDeploymentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${NamePrefix}/post-dev-deployment
      RetentionInDays: 7

  PostAccDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-post-acc-deployment-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  PostAccDeploymentProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-post-acc-deployment-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
      Roles:
        - !Ref PostAccDeploymentRole

  PostAccDeploymentProject:
    Type: AWS::CodeBuild::Project
    DependsOn: PostAccDeploymentProjectPolicy
    Properties:
      Name: !Sub ${NamePrefix}-post-acc-deployment
      EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt PostAccDeploymentRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
        PrivilegedMode: false
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Retrieving Build ID...
                - BUILD_ID=$(cat $CODEBUILD_SRC_DIR/templates/iac/master-parameters.json | jq -r .Parameters.BuildId)
                - echo $BUILD_ID
            build:
              commands:
                - ARTIFACTS_BUCKET=${PREFIX}-artifacts-${AWS_REGION}-${ARTIFACTS_ACCOUNT}
                # - echo Tagging build artifacts...
                # - aws s3api list-objects --bucket $ARTIFACTS_BUCKET --query 'Contents[].{Key:Key}' --prefix builds/$BUILD_ID/ --output text | xargs -n 1 aws s3api put-object-tagging --bucket $ARTIFACTS_BUCKET --tagging 'TagSet=[{Key=environment,Value=acc}]' --key
      TimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref PostAccDeploymentLogGroup
          Status: ENABLED

  PostAccDeploymentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${NamePrefix}/post-acc-deployment
      RetentionInDays: 7

  PostPrdDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-post-prd-deployment-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  PostPrdDeploymentProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-post-prd-deployment-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:DeleteObject
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${DRRegion}-${AWS::AccountId}
              - !Sub arn:aws:s3:::${NamePrefix}-artifacts-${DRRegion}-${AWS::AccountId}/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
      Roles:
        - !Ref PostPrdDeploymentRole

  PostPrdDeploymentProject:
    Type: AWS::CodeBuild::Project
    DependsOn: PostPrdDeploymentProjectPolicy
    Properties:
      Name: !Sub ${NamePrefix}-post-prd-deployment
      EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt PostPrdDeploymentRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: PREFIX
            Value: !Ref NamePrefix
          - Name: ARTIFACTS_ACCOUNT
            Value: !Ref AWS::AccountId
          - Name: DR_REGION
            Value: !Ref DRRegion
        PrivilegedMode: false
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Retrieving Build ID...
                - BUILD_ID=$(cat $CODEBUILD_SRC_DIR/templates/iac/master-parameters.json | jq -r .Parameters.BuildId)
                - echo $BUILD_ID
            build:
              commands:
                - ARTIFACTS_BUCKET=${PREFIX}-artifacts-${AWS_REGION}-${ARTIFACTS_ACCOUNT}
                - ARTIFACTS_BUCKET_DR=${PREFIX}-artifacts-${DR_REGION}-${ARTIFACTS_ACCOUNT}
                # - echo Tagging build artifacts...
                # - echo s3://${ARTIFACTS_BUCKET}/builds/${BUILD_ID}
                # - aws s3api list-objects --bucket $ARTIFACTS_BUCKET --query 'Contents[].{Key:Key}' --prefix builds/$BUILD_ID/ --output text | xargs -n 1 aws s3api put-object-tagging --bucket $ARTIFACTS_BUCKET --tagging 'TagSet=[{Key=environment,Value=prd}]' --key
                - echo Syncing the S3 bucket folder...
                - echo s3://${ARTIFACTS_BUCKET_DR}/builds/${BUILD_ID}
                - aws s3 sync --source-region ${AWS_REGION} --region ${DR_REGION} s3://${ARTIFACTS_BUCKET}/builds/${BUILD_ID} s3://${ARTIFACTS_BUCKET_DR}/builds/${BUILD_ID}
      TimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref PostPrdDeploymentLogGroup
          Status: ENABLED

  PostPrdDeploymentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${NamePrefix}/post-prd-deployment
      RetentionInDays: 7

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-pipeline-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  ArtifactsBucketReadWritePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-artifacts-bucket-readwrite-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*
      Roles:
        - !Ref BuildRole
        - !Ref PipelineRole
        - !If
          - IsCicdAccount
          - !Ref CicdRole
          - !Ref AWS::NoValue

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-codepipeline-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: "*"
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Effect: Allow
            Action:
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"
      Roles:
        - !Ref PipelineRole

### TODO ###
  AssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${NamePrefix}-assume-role-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-cicd-role
              - !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
              - !Sub arn:aws:iam::${ProductionAccount}:role/${NamePrefix}-cicd-role
      Roles:
        - !Ref PipelineRole
  ### TODO ###
  EcrRepositoryMMPBackofficeApp:
    # DeletionPolicy: Retain
    # UpdateReplacePolicy: Retain
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Only keep 20 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 20
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Sub ${NamePrefix}/mmp-backoffice
      ImageScanningConfiguration:
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${DevelopmentAccount}:root
                - !Sub arn:aws:iam::${AcceptanceAccount}:root
                - !Sub arn:aws:iam::${ProductionAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
  ### TODO ###
  EcrRepositoryMMPFrontofficeApp:
    # DeletionPolicy: Retain
    # UpdateReplacePolicy: Retain
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Only keep 20 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 20
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: !Sub ${NamePrefix}/mmp-frontoffice
      ImageScanningConfiguration:
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${CicdAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${DevelopmentAccount}:root
                - !Sub arn:aws:iam::${AcceptanceAccount}:root
                - !Sub arn:aws:iam::${ProductionAccount}:root
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
  ### TODO ###
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: AssumeRolePolicy
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Sub ${NamePrefix}-pipeline
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
        EncryptionKey:
          Id: !GetAtt KMSKey.Arn
          Type: KMS
      Stages:
        - Name: Source
          Actions:
            - Name: S3WebsiteSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: S3
              Configuration:
                S3Bucket: !Ref ArtifactsBucket
                S3ObjectKey: package.zip
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
            - Name: ECRSourceMMPBackOffice
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !Ref EcrRepositoryMMPBackofficeApp
              OutputArtifacts:
                - Name: EcrArtifactMMPBackOffice
              RunOrder: 1
            - Name: ECRSourceMMPFrontOffice
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !Ref EcrRepositoryMMPFrontofficeApp
              OutputArtifacts:
                - Name: EcrArtifactMMPFrontOffice
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildMMP
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
                PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub |
                  [{"name":"REPOSITORY_MMPBACK","value":"${EcrRepositoryMMPBackofficeApp}"},
                  {"name":"REPOSITORY_MMPFRONT","value":"${EcrRepositoryMMPFrontofficeApp}"}]
              RunOrder: 1
              InputArtifacts:
                - Name: SourceArtifact
                - Name: EcrArtifactMMPBackOffice
                - Name: EcrArtifactMMPFrontOffice
              OutputArtifacts:
                - Name: BuildArtifact
                - Name: WebsiteArtifact
        - !If
          - EnableDeploymentToDev
          - Name: DeployToDevelopment
            Actions:
              - Name: Infra
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode: REPLACE_ON_FAILURE
                  StackName: !Sub ${NamePrefix}-master
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.yml
                  ParameterOverrides: !Sub '{"Environment": "dev", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 1
              - Name: Database
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode: REPLACE_ON_FAILURE
                  StackName: !Sub ${NamePrefix}-db
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.db.yml
                  ParameterOverrides: !Sub '{"Environment": "dev", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 2
              - Name: Service-Backoffice
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode: REPLACE_ON_FAILURE
                  StackName: !Sub ${NamePrefix}-service-backoffice
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.service-backoffice.yml
                  ParameterOverrides: !Sub '{"Environment": "dev", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 3
              - Name: Service-Frontoffice
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode: REPLACE_ON_FAILURE
                  StackName: !Sub ${NamePrefix}-service-frontoffice
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.service-frontoffice.yml
                  ParameterOverrides: !Sub '{"Environment": "dev", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${DevelopmentAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 4
              - Name: Web-FrontOffice
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: S3
                Configuration:
                  BucketName: !Sub ${NamePrefix}-website-${AWS::Region}-${DevelopmentAccount}
                  Extract: true
                  CannedACL: public-read
                RunOrder: 5
                InputArtifacts:
                  - Name: WebsiteArtifact
          - !Ref AWS::NoValue
        - !If
          - EnableDeploymentToAcc
          - Name: DeployToAcceptance
            Actions:
              - Name: Infra
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode:
                    !If [EnableDeploymentToAcc, CREATE_UPDATE, DELETE_ONLY]
                  StackName: !Sub ${NamePrefix}-master
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.yml
                  ParameterOverrides: !Sub '{"Environment": "acc", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 1
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
              - Name: Database
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode:
                    !If [EnableDeploymentToAcc, CREATE_UPDATE, DELETE_ONLY]
                  StackName: !Sub ${NamePrefix}-db
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.db.yml
                  ParameterOverrides: !Sub '{"Environment": "acc", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 2
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
              - Name: Service-Backoffice
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode:
                    !If [EnableDeploymentToAcc, CREATE_UPDATE, DELETE_ONLY]
                  StackName: !Sub ${NamePrefix}-service-backoffice
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.service-backoffice.yml
                  ParameterOverrides: !Sub '{"Environment": "acc", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 3
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
              - Name: Service-Frontoffice
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: CloudFormation
                Configuration:
                  ActionMode:
                    !If [EnableDeploymentToAcc, CREATE_UPDATE, DELETE_ONLY]
                  StackName: !Sub ${NamePrefix}-service-frontoffice
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  TemplatePath: BuildArtifact::templates/iac/master.service-frontoffice.yml
                  ParameterOverrides: !Sub '{"Environment": "acc", "NamePrefix": "${NamePrefix}", "ArtifactsAccount": "${AWS::AccountId}"}'
                  TemplateConfiguration: BuildArtifact::templates/iac/master-parameters.json
                  RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-deployment-role
                InputArtifacts:
                  - Name: BuildArtifact
                RunOrder: 4
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
              - Name: Web-FrontOffice
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: "1"
                  Provider: S3
                Configuration:
                  BucketName: !Sub ${NamePrefix}-website-${AWS::Region}-${AcceptanceAccount}
                  Extract: true
                  CannedACL: public-read
                RunOrder: 5
                RoleArn: !Sub arn:aws:iam::${AcceptanceAccount}:role/${NamePrefix}-cicd-role
                InputArtifacts:
                  - Name: WebsiteArtifact
          - !Ref AWS::NoValue
  PipelineCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${NamePrefix}-cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}

  PipelineCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              - !Ref ArtifactsBucket
            key:
              - package.zip
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          RoleArn: !GetAtt PipelineCloudWatchEventRole.Arn
          Id: !Sub ${NamePrefix}-pipeline

  PipelineTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${NamePrefix}-pipeline-topic
      DisplayName: !Sub ${NamePrefix}-pipeline-topic
      Subscription:
        - Endpoint: groupictcicd@wipo.int
          Protocol: email

#  PipelineNotifications:
#    Type: AWS::CodeStarNotifications::NotificationRule
#    Properties:
#      Name: !Sub ${NamePrefix}-notify-on-failures
#      DetailType: FULL
#      Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
#      EventTypeIds:
#        - codepipeline-pipeline-pipeline-execution-failed
#      Targets:
#        - TargetType: SNS
#          TargetAddress: !Ref PipelineTopic

Outputs:
  ArtifactsBucket:
    Description: "The name of the artifact bucket"
    Value: !Ref ArtifactsBucket

  ArtifactsBucketArn:
    Description: "The Arn of the artifact bucket"
    Value: !GetAtt ArtifactsBucket.Arn

  KMSKeyArn:
    Description: "The Arn of the KMS key"
    Value: !GetAtt KMSKey.Arn